int forking(char ** args, char *inputFile, char *outputFile) {
    pid_t pid;
    int status;
    pid_t cpid;
    int fdInput = 0, fdOutput = 1;

    pid = fork();

    if (pid < 0) { // error
        printf("System failed to fork\n");
        return 1;
    }
    else if (pid == 0) { // child process

        if (inputFile) { // input redirection
            fdInput = open(inputFile, O_RDONLY);
            if (fdInput < 0) {
                printf("Failed to open input file %s\n", inputFile);
                exit(EXIT_FAILURE);
            }
            dup2(fdInput, 0);
            close(fdInput);
        }

        if (outputFile) { // output redirection
            fdOutput = open(outputFile, O_WRONLY | O_CREAT | O_TRUNC, 0644);
            if (fdOutput < 0) {
                printf("Failed to open output file %s\n", outputFile);
                exit(EXIT_FAILURE);
            }
            dup2(fdOutput, 1);
            close(fdOutput);
        }

        if (execvp(args[0], args) < 0) { // execute the command
            printf("Failed to execute command %s\n", args[0]);
            exit(EXIT_FAILURE);
        }
    }
    else { // parent process
        cpid = waitpid(pid, &status, 0); // wait for child to finish
        if (cpid == -1) {
            printf("Failed to wait for child process\n");
            return 1;
        }
        if (WIFEXITED(status)) {
            printf("Child process exited with status %d\n", WEXITSTATUS(status));
        }
    }

    return 0;
}
